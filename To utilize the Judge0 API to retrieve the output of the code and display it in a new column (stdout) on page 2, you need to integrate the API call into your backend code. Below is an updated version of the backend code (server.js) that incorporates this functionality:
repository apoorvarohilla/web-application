const express = require('express');
const mysql = require('mysql');
const redis = require('redis');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000;

// MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'your_username',
  password: 'your_password',
  database: 'code_snippets_db'
});

db.connect((err) => {
  if (err) throw err;
  console.log('Connected to MySQL database');
});

// Redis client
const redisClient = redis.createClient();

// Middleware
app.use(express.json());

// Routes
app.post('/submit', async (req, res) => {
  const { username, language, stdin, code } = req.body;

  const snippet = { username, language, stdin, code };

  // Store snippet in MySQL database
  const sql = 'INSERT INTO snippets SET ?';
  db.query(sql, snippet, (err, result) => {
    if (err) throw err;
    console.log('Snippet added to MySQL');
    // Invalidate cache on new submission
    redisClient.del('snippets');
    res.status(201).send('Snippet submitted successfully');
  });
});

app.get('/snippets', async (req, res) => {
  // Retrieve snippets from Redis cache if available
  redisClient.get('snippets', async (err, data) => {
    if (err) throw err;

    if (data) {
      console.log('Snippets retrieved from cache');
      res.send(JSON.parse(data));
    } else {
      // Retrieve snippets from MySQL
      const sql = 'SELECT * FROM snippets';
      db.query(sql, async (err, results) => {
        if (err) throw err;
        console.log('Snippets retrieved from MySQL');

        // Fetch output from Judge0 API for each snippet
        for (const snippet of results) {
          try {
            const response = await axios.post('https://judge0-ce.p.rapidapi.com/submissions', {
              source_code: snippet.code,
              stdin: snippet.stdin,
              language_id: snippet.language_id // You need to map language names to language IDs supported by Judge0
            }, {
              headers: {
                'Content-Type': 'application/json',
                'X-RapidAPI-Key': 'YOUR_JUDGE0_API_KEY'
              }
            });
            // Update snippet with output (stdout)
            snippet.stdout = response.data.stdout;
          } catch (error) {
            console.error('Error fetching output from Judge0:', error);
          }
        }

        // Store snippets in Redis cache
        redisClient.setex('snippets', 3600, JSON.stringify(results));
        res.send(results);
      });
    }
  });
});

// Start server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
